start
  = (additive)*

// suma
additive = left:subtraction "+" right:additive {
 return left + right; }
  / subtraction

// scadere
subtraction = left:exponential "-" right:subtraction {
 return left - right; }
  / exponential

// functia putere
exponential = left:division "^" right:exponential {
return Math.pow(left,right)}
  / division

// impartire
division = left:multiplicative "/" right:division {
return left/right}
  / multiplicative

//  inmultire
multiplicative = left:primary "*" right:multiplicative {
 return left * right; }
  / primary

//prioritatea parantezelor
primary  = integer
  / "(" additive:additive ")" {
 return additive; }

//numerele intregi
integer "integer"  = (digits:[0-9]+) { 
return parseInt(digits.join(""), 10); }

//Stringurile
String "string"  = variable:([a-zA-Z]+) { 
return variable.join(""); }
